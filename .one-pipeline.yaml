version: '1'

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "setup"
  
test:
  dind: true
  abort_on_failure: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    # Download and configure golang
    wget --header "Accept: application/octet-stream"  "https://golang.org/dl/go1.16.linux-amd64.tar.gz" 
    rm -rf /usr/local/go && tar -C /usr/local -xf go1.16.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    apt-get update
    apt-get -y install build-essential 
    # Run unit tests
    export DOCKER_USERNAME=$(get_env docker-username)
    export DOCKER_PASSWORD=$(get_env docker-password)
    make unit-test
    make docker-login
    make build-image

containerize:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    # Download and configure golang
    wget --header "Accept: application/octet-stream"  "https://golang.org/dl/go1.16.linux-amd64.tar.gz" 
    rm -rf /usr/local/go && tar -C /usr/local -xf go1.16.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    apt-get update
    apt-get -y install build-essential 
    # Download and install skopeo
    if ! command -v skopeo &> /dev/null; then  
      if [ ! -f "/apt/sources.list.d/devel:kubic:libcontainers:stable.list" ]; then
        sudo sh -c "echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"      
        wget --no-check-certificate -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_18.04/Release.key -O- | sudo apt-key add -
        sudo apt-get update -qq
      fi
      sudo apt-get -y install skopeo
    else
      skopeo --version
    fi  
    # Build images
    export PIPELINE_USERNAME=$(get_env ibmcloud-api-user)
    export PIPELINE_PASSWORD=$(get_env ibmcloud-api-key)    
    # Build amd64 image
    ##make build-pipeline-multiarch-image
    ##make push-pipeline-multiarch-image
    # Build ppc64le and s390x images
    ##./scripts/pipeline/launch-travis.sh -t $(get_env travis-token) -r "https://github.com/application-stacks/runtime-component-operator" -b $(get_env branch) -l
    # Build bundle image
    echo $(get_env ibmcloud-api-key) | docker login us.icr.io -u "$(get_env ibmcloud-api-user)" --password-stdin
    ##make bundle-build
    ##BUNDLE_IMAGE=us.icr.io/runtimecomponentoperator/operator:bundle-daily
    ##docker tag applicationstacks/operator:bundle-daily $BUNDLE_IMAGE
    ##docker push $BUNDLE_IMAGE
    # Build manifest
    ##make build-pipeline-manifest
    # Save artifacts
    declare -a tags=("daily-amd64" "daily-ppc64le" "daily-s390x") 
    for i in "${tags[@]}"
    do
      IMAGE=us.icr.io/runtimecomponentoperator/operator:$i
      DIGEST="$(skopeo inspect docker://$IMAGE | grep Digest | grep -o 'sha[^\"]*')"
      ARCH=$(echo $i | cut -d'-' -f 2)
      echo "Saving artifact $i name=$IMAGE digest=$DIGEST"
      save_artifact $i type=image name="$IMAGE" "digest=$DIGEST" "arch=$ARCH"   
    done

    # launch the sub-pipeline to do the twistlock scanning on the amd64 container image    
    source "${ONE_PIPELINE_PATH}"/tools/trigger-task
    trigger-task "twistlock-scan" "Twistlock container image scan"    

deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    echo "deploy"

dynamic-scan: 
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "dynamic-scan"
    #export APP_URL=$(cat ../app-url)
    # feature preivew this until evidence locker v2 usage is full feature ready 
    # can be triggered, and owasp will run for preview purposes 
    #source scripts/zap/trigger_api_scan.sh

acceptance-test:
  dind: true  
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "acceptance-test"
    # Download and configure golang
    wget --header "Accept: application/octet-stream"  "https://golang.org/dl/go1.16.linux-amd64.tar.gz" 
    rm -rf /usr/local/go && tar -C /usr/local -xf go1.16.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    apt-get update
    apt-get -y install build-essential    
    host=$(echo "$(get_env test-cluster-url)" | cut -d ':' -f1 | cut -d '.' -f2-)
    mkdir -p /etc/docker
    printf '{\n  "insecure-registries" : ["default-route-openshift-image-registry.apps.$host"]\n}' > /etc/docker/daemon.json
    cat /etc/docker/daemon.json
    systemctl restart docker   
    export DOCKER_USERNAME=$(get_env docker-username)
    export DOCKER_PASSWORD=$(get_env docker-password)  
    export CLUSTER_URL=$(get_env test-cluster-url)
    export CLUSTER_TOKEN=$(get_env test-cluster-token) 
    export TRAVIS_BUILD_NUMBER=$BUILD_NUMBER   
    make setup
    make test-e2e

#scan-artifact:
#  abort_on_failure: false
#  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
#  script: |
    #!/usr/bin/env bash
    #. /opt/one-pipeline/internal/container-registry/va_scan    
    #./scripts/twistlock-scan.sh    


release:
  abort_on_failure: false
  image: wcp-compliance-automation-team-docker-local.artifactory.swg-devops.com/ibm-compliance-automation:1.9.1@sha256:3f3e344a1efb160d83c48cf2ee878a39cbad058c8640c423472e0546316232fd
  script: |
    #!/usr/bin/env bash
    echo "release" 

twistlock-scan:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "twistlock-scan task"
    ./scripts/pipeline/twistlock-scan.sh


#owasp-zap-api:
#  dind: true
#  abort_on_failure: false
#  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
#  script: |
#    !/usr/bin/env bash
#    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
#      trap env EXIT
#      env
#      set -x
#    fi
    
#    source scripts/zap/setup_api_scan.sh
#    source scripts/zap/run_api_scan.sh
