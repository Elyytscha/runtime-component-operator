version: '1'

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "setup"
  
test:
  dind: true
  abort_on_failure: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    # Download and configure golang
    wget --header "Accept: application/octet-stream"  "https://golang.org/dl/go1.16.linux-amd64.tar.gz" 
    rm -rf /usr/local/go && tar -C /usr/local -xf go1.16.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    apt-get update
    apt-get -y install build-essential 
    # Run unit tests
    export DOCKER_USERNAME=$(get_env docker-username)
    export DOCKER_PASSWORD=$(get_env docker-password)
    make unit-test
    make docker-login
    make build-image

containerize:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    # Download and configure golang
    wget --header "Accept: application/octet-stream"  "https://golang.org/dl/go1.16.linux-amd64.tar.gz" 
    rm -rf /usr/local/go && tar -C /usr/local -xf go1.16.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    apt-get update
    apt-get -y install build-essential 
    # Build images
    export DOCKER_USERNAME=$(get_env docker-username)
    export DOCKER_PASSWORD=$(get_env docker-password)    
    # Build amd64 image
    make build-multiarch-image
    echo $(get_env ibmcloud-api-key) | docker login us.icr.io -u "$(get_env ibmcloud-api-user)" --password-stdin
    IMAGE=us.icr.io/runtimecomponentoperator/operator:daily-amd64
    docker tag applicationstacks/operator:daily-amd64 $IMAGE
    docker push $IMAGE
    # Build ppc64le and s390x images
    ./scripts/launch-travis.sh -t $(get_env travis-token) -r "https://github.com/application-stacks/runtime-component-operator" -u "$(get_env ibmcloud-api-user)" -a $(get_env ibmcloud-api-key) -b $(get_env branch) -l
    # Build bundle image
    make bundle-build
    IMAGE=us.icr.io/runtimecomponentoperator/operator:bundle-daily
    docker tag applicationstacks/operator:bundle-daily $IMAGE
    docker push $IMAGE
    # Save artifacts
    declare -a tags=("daily-amd64" "daily-ppc64le" "daily-s390x" "bundle-daily") 
    for i in "${tags[@]}"
    do
      IMAGE=us.icr.io/runtimecomponentoperator/operator:$i
      docker pull "$IMAGE" > /dev/null
      DIGEST="$(docker image inspect --format '{{index .RepoDigests 0}}' "$IMAGE" | cut -d@ -f2)"
      save_artifact $i type=image name="$IMAGE" "digest=$DIGEST"    
    done
    # Build manifest
    OPERATOR_IMAGE=us.icr.io/runtimecomponentoperator/operator
    make setup-manifest
    echo $(get_env ibmcloud-api-key) | docker login us.icr.io -u "$(get_env ibmcloud-api-user)" --password-stdin
    ./scripts/build-manifest.sh -u "$(get_env ibmcloud-api-user)" -p $(get_env ibmcloud-api-key) --image "$OPERATOR_IMAGE"    

 
deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    echo "deploy"

dynamic-scan: 
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "dynamic-scan"
    #export APP_URL=$(cat ../app-url)
    # feature preivew this until evidence locker v2 usage is full feature ready 
    # can be triggered, and owasp will run for preview purposes 
    #source scripts/zap/trigger_api_scan.sh

acceptance-test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "acceptance-test"

release:
  abort_on_failure: false
  image: wcp-compliance-automation-team-docker-local.artifactory.swg-devops.com/ibm-compliance-automation:1.9.1@sha256:3f3e344a1efb160d83c48cf2ee878a39cbad058c8640c423472e0546316232fd
  script: |
    #!/usr/bin/env bash
    echo "release" 

    #owasp-zap-api:
    #  dind: true
    #  abort_on_failure: false
    #  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
    #  script: |
    #!/usr/bin/env bash
    #    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
    #      trap env EXIT
    #      env
    #      set -x
    #    fi
    
    #    source scripts/zap/setup_api_scan.sh
    #    source scripts/zap/run_api_scan.sh
